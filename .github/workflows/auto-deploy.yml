name: Auto Deploy on Every Commit

on:
  push:
    branches: [ "*" ]  # Trigger on push to any branch
  
env:
  CTF_FLAG: Medusa{CTF_CHALLENGE_PHASE1_PASSED}
  RESOURCE_GROUP: medusa-ctf-rg
  LOCATION: southeastasia

jobs:
  auto-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Login to Azure
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
        
    - name: Quick Deploy to Azure
      run: |
        # Get branch name and make it Azure-compatible
        BRANCH_NAME=${GITHUB_REF##*/}
        BRANCH_SAFE=$(echo "$BRANCH_NAME" | sed 's/[^a-zA-Z0-9]/-/g' | tr '[:upper:]' '[:lower:]' | cut -c1-10)
        COMMIT_SHORT=${GITHUB_SHA::7}
        APP_NAME="medusa-${BRANCH_SAFE}-${COMMIT_SHORT}"
        
        echo "🚀 Auto-deploying $BRANCH_NAME branch (commit $COMMIT_SHORT)"
        
        # Create resource group if it doesn't exist
        az group create --name ${{ env.RESOURCE_GROUP }} --location ${{ env.LOCATION }}
        
        # Deploy using ARM template
        az deployment group create \
          --name $APP_NAME \
          --resource-group ${{ env.RESOURCE_GROUP }} \
          --template-file .azure/azure-deploy.json \
          --parameters \
            appName=$APP_NAME \
            planName=medusa-ctf-plan \
            location=${{ env.LOCATION }} || true
        
        # Wait a bit for the app to start
        sleep 30
        
        # Get the URL
        URL="https://${APP_NAME}.azurewebsites.net"
        
        # Test if deployment worked
        if curl -f -s "$URL" > /dev/null 2>&1; then
          echo "✅ Deployment successful!"
          
          # Test SQL injection
          response=$(curl -s -X POST "$URL/login" \
            -H "Content-Type: application/x-www-form-urlencoded" \
            -d "username=admin' OR '1'='1' --&password=test" \
            -i || echo "")
          
          if echo "$response" | grep -q "X-CTF-Flag"; then
            echo "✅ CTF functionality working!"
          fi
          
          # Create deployment summary
          echo "## 🎯 Auto-Deployment Complete" >> $GITHUB_STEP_SUMMARY
          echo "**Branch**: \`$BRANCH_NAME\`" >> $GITHUB_STEP_SUMMARY
          echo "**Commit**: \`$COMMIT_SHORT\`" >> $GITHUB_STEP_SUMMARY
          echo "**URL**: [$URL]($URL)" >> $GITHUB_STEP_SUMMARY
          echo "**Status**: ✅ Active" >> $GITHUB_STEP_SUMMARY
          echo "**CTF Flag**: \`${{ env.CTF_FLAG }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🧪 Test SQL Injection:" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
          echo "curl -X POST '$URL/login' \\" >> $GITHUB_STEP_SUMMARY
          echo "  -H 'Content-Type: application/x-www-form-urlencoded' \\" >> $GITHUB_STEP_SUMMARY
          echo "  -d \"username=admin' OR '1'='1' --&password=test\" \\" >> $GITHUB_STEP_SUMMARY
          echo "  -v" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          
        else
          echo "❌ Deployment may have failed"
          echo "## ❌ Auto-Deployment Issues" >> $GITHUB_STEP_SUMMARY
          echo "**Branch**: \`$BRANCH_NAME\`" >> $GITHUB_STEP_SUMMARY
          echo "**URL**: $URL" >> $GITHUB_STEP_SUMMARY
          echo "**Status**: ⚠️ Check manually" >> $GITHUB_STEP_SUMMARY
        fi

  cleanup-old-deployments:
    runs-on: ubuntu-latest
    needs: auto-deploy
    if: always()
    
    steps:
    - name: Login to Azure
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
        
    - name: Cleanup old deployments
      run: |
        echo "🧹 Cleaning up old deployments..."
        
        # List all web apps in the resource group
        apps=$(az webapp list --resource-group ${{ env.RESOURCE_GROUP }} --query "[].name" -o tsv)
        
        # Keep only the 3 most recent apps
        app_count=$(echo "$apps" | wc -l)
        if [ $app_count -gt 3 ]; then
          echo "Found $app_count apps, keeping 3 most recent"
          
          # Sort apps by creation time and delete older ones
          az webapp list --resource-group ${{ env.RESOURCE_GROUP }} \
            --query "sort_by([], &createdTime)[:-3].name" -o tsv | \
          while read app_name; do
            if [ ! -z "$app_name" ]; then
              echo "Deleting old app: $app_name"
              az webapp delete --resource-group ${{ env.RESOURCE_GROUP }} --name "$app_name" || true
            fi
          done
        else
          echo "Only $app_count apps found, no cleanup needed"
        fi
