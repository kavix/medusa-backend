name: Auto Deploy on Every Commit

on:
  push:
    branches: [ "*" ]  # Trigger on push to any branch
  
env:
  CTF_FLAG: Medusa{CTF_CHALLENGE_PHASE1_PASSED}
  RESOURCE_GROUP: medusa-ctf-rg
  LOCATION: southeastasia

jobs:
  auto-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Login to Azure
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
        
    - name: Quick Deploy to Azure
      run: |
        # Get branch name and make it Azure-compatible
        BRANCH_NAME=${GITHUB_REF##*/}
        BRANCH_SAFE=$(echo "$BRANCH_NAME" | sed 's/[^a-zA-Z0-9]/-/g' | tr '[:upper:]' '[:lower:]' | cut -c1-10)
        COMMIT_SHORT=${GITHUB_SHA::7}
        APP_NAME="medusa-${BRANCH_SAFE}-${COMMIT_SHORT}"
        
        echo "🚀 Auto-deploying $BRANCH_NAME branch (commit $COMMIT_SHORT)"
        
        # Create resource group if it doesn't exist
        az group create --name ${{ env.RESOURCE_GROUP }} --location ${{ env.LOCATION }} --output none
        
        # Deploy using ARM template with proper error handling
        echo "Deploying app: $APP_NAME"
        if az deployment group create \
          --name $APP_NAME \
          --resource-group ${{ env.RESOURCE_GROUP }} \
          --template-file .azure/azure-deploy.json \
          --parameters \
            appName=$APP_NAME \
            planName=medusa-ctf-plan \
            location=${{ env.LOCATION }} \
          --output none; then
          echo "✅ Deployment successful"
        else
          echo "❌ Deployment failed, but continuing..."
        fi
        
        # Wait a bit for the app to start
        sleep 30
        
        # Get the URL
        URL="https://${APP_NAME}.azurewebsites.net"
        
        # Test if deployment worked
        if curl -f -s "$URL" > /dev/null 2>&1; then
          echo "✅ Deployment successful!"
          
          # Test SQL injection
          response=$(curl -s -X POST "$URL/login" \
            -H "Content-Type: application/x-www-form-urlencoded" \
            -d "username=admin' OR '1'='1' --&password=test" \
            -i || echo "")
          
          if echo "$response" | grep -q "X-CTF-Flag"; then
            echo "✅ CTF functionality working!"
          fi
          
          # Create deployment summary
          echo "## 🎯 Auto-Deployment Complete" >> $GITHUB_STEP_SUMMARY
          echo "**Branch**: \`$BRANCH_NAME\`" >> $GITHUB_STEP_SUMMARY
          echo "**Commit**: \`$COMMIT_SHORT\`" >> $GITHUB_STEP_SUMMARY
          echo "**URL**: [$URL]($URL)" >> $GITHUB_STEP_SUMMARY
          echo "**Status**: ✅ Active" >> $GITHUB_STEP_SUMMARY
          echo "**CTF Flag**: \`${{ env.CTF_FLAG }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🧪 Test SQL Injection:" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
          echo "curl -X POST '$URL/login' \\" >> $GITHUB_STEP_SUMMARY
          echo "  -H 'Content-Type: application/x-www-form-urlencoded' \\" >> $GITHUB_STEP_SUMMARY
          echo "  -d \"username=admin' OR '1'='1' --&password=test\" \\" >> $GITHUB_STEP_SUMMARY
          echo "  -v" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          
        else
          echo "❌ Deployment may have failed"
          echo "## ❌ Auto-Deployment Issues" >> $GITHUB_STEP_SUMMARY
          echo "**Branch**: \`$BRANCH_NAME\`" >> $GITHUB_STEP_SUMMARY
          echo "**URL**: $URL" >> $GITHUB_STEP_SUMMARY
          echo "**Status**: ⚠️ Check manually" >> $GITHUB_STEP_SUMMARY
        fi

  cleanup-old-deployments:
    runs-on: ubuntu-latest
    needs: auto-deploy
    if: always()
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Login to Azure
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
        
    - name: Install jq for JSON processing
      run: sudo apt-get update && sudo apt-get install -y jq
        
    - name: Cleanup old deployments (keep only latest)
      run: |
        echo "🧹 Running automated cleanup to keep only the latest deployment..."
        
        RESOURCE_GROUP="${{ env.RESOURCE_GROUP }}"
        
        echo "🔍 Finding all web apps in resource group: $RESOURCE_GROUP"
        
        # Get all web apps with their creation times
        apps_json=$(az webapp list --resource-group "$RESOURCE_GROUP" --query "[].{name:name, createdTime:createdTime}" -o json)
        
        if [ -z "$apps_json" ] || [ "$apps_json" = "[]" ]; then
            echo "❌ No web apps found in resource group $RESOURCE_GROUP"
            exit 0
        fi
        
        # Count total apps
        total_apps=$(echo "$apps_json" | jq '. | length')
        echo "📊 Found $total_apps web apps total"
        
        if [ "$total_apps" -le 1 ]; then
            echo "✅ Only one or no apps found, no cleanup needed"
            exit 0
        fi
        
        # Find the latest app by creation time
        latest_app=$(echo "$apps_json" | jq -r 'sort_by(.createdTime) | last | .name')
        echo "🎯 Latest app identified: $latest_app"
        
        # Get all apps except the latest one
        apps_to_delete=$(echo "$apps_json" | jq -r --arg latest "$latest_app" '.[] | select(.name != $latest) | .name')
        
        if [ -z "$apps_to_delete" ]; then
            echo "✅ No apps to delete"
            exit 0
        fi
        
        echo "🗑️  Apps to be deleted:"
        echo "$apps_to_delete"
        echo ""
        
        # Delete old apps (automated in CI/CD)
        deleted_count=0
        failed_count=0
        
        echo "🧹 Starting automated cleanup..."
        echo "$apps_to_delete" | while read -r app_name; do
            if [ ! -z "$app_name" ]; then
                echo "Deleting: $app_name"
                if az webapp delete --name "$app_name" --resource-group "$RESOURCE_GROUP" --only-show-errors; then
                    echo "✅ Successfully deleted: $app_name"
                    deleted_count=$((deleted_count + 1))
                else
                    echo "❌ Failed to delete: $app_name"
                    failed_count=$((failed_count + 1))
                fi
            fi
        done
        
        echo ""
        echo "🎉 Automated cleanup completed!"
        echo "🏆 Kept latest app: $latest_app"
        
        # Show remaining apps
        echo ""
        echo "📋 Remaining apps:"
        az webapp list --resource-group "$RESOURCE_GROUP" --query "[].{Name:name, CreatedTime:createdTime, Url:defaultHostName}" --output table
        
        # Test the remaining app
        echo ""
        echo "🧪 Testing remaining app..."
        app_url="https://${latest_app}.azurewebsites.net"
        
        # Wait a moment for any restart to complete
        sleep 10
        
        if curl -f -s "$app_url" > /dev/null; then
            echo "✅ App is responding: $app_url"
        else
            echo "⚠️  App may not be responding: $app_url"
        fi
        
        # Add cleanup summary to GitHub Actions summary
        echo "## 🧹 Automated Cleanup Report" >> $GITHUB_STEP_SUMMARY
        echo "**Total apps before cleanup**: $total_apps" >> $GITHUB_STEP_SUMMARY
        echo "**Latest app kept**: \`$latest_app\`" >> $GITHUB_STEP_SUMMARY
        echo "**App URL**: [https://${latest_app}.azurewebsites.net](https://${latest_app}.azurewebsites.net)" >> $GITHUB_STEP_SUMMARY
        echo "**Cleanup time**: $(date)" >> $GITHUB_STEP_SUMMARY
