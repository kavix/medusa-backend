name: Deploy to Azure

on:
  push:
    branches: [ main, develop, feature/* ]  # Deploy from any branch
  pull_request:
    branches: [ main ]
    types: [ closed ]  # Deploy when PR is merged
  workflow_dispatch:  # Manual deployment
  workflow_run:
    workflows: ["Build & Publish Docker Images"]
    types: [ completed ]
    branches: [ main ]

env:
  AZURE_WEBAPP_NAME: medusa-ctf
  CTF_FLAG: Medusa{CTF_CHALLENGE_PHASE1_PASSED}
  RESOURCE_GROUP: medusa-ctf-rg
  LOCATION: southeastasia

jobs:
  deploy:
    runs-on: ubuntu-latest
    if: |
      (github.event_name == 'push' && github.ref == 'refs/heads/main') ||
      (github.event_name == 'pull_request' && github.event.pull_request.merged == true) ||
      (github.event_name == 'workflow_run' && github.event.workflow_run.conclusion == 'success') ||
      github.event_name == 'workflow_dispatch'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Login to Azure
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
        
    - name: Deploy to Azure App Service
      run: |
        # Generate unique app name based on branch and timestamp
        BRANCH_NAME=${GITHUB_REF##*/}
        BRANCH_SAFE=$(echo "$BRANCH_NAME" | sed 's/[^a-zA-Z0-9]/-/g' | tr '[:upper:]' '[:lower:]')
        APP_NAME="medusa-ctf-${BRANCH_SAFE}-$(date +%s)"
        
        # Create resource group if it doesn't exist
        az group create --name ${{ env.RESOURCE_GROUP }} --location ${{ env.LOCATION }}
        
        # Deploy using ARM template
        az deployment group create \
          --name $APP_NAME \
          --resource-group ${{ env.RESOURCE_GROUP }} \
          --template-file .azure/azure-deploy.json \
          --parameters \
            appName=$APP_NAME \
            planName=medusa-ctf-plan \
            location=${{ env.LOCATION }}
        
        # Wait for deployment to complete
        echo "Waiting for app to be ready..."
        sleep 30
        
        # Test the deployed app
        URL="https://${APP_NAME}.azurewebsites.net"
        for i in {1..10}; do
          if curl -f -s "$URL" > /dev/null; then
            echo "✅ App is responding at $URL"
            break
          fi
          echo "Waiting for app to start... (attempt $i/10)"
          sleep 15
        done
        
        # Test SQL injection functionality
        echo "Testing SQL injection..."
        response=$(curl -s -X POST "$URL/login" \
          -H "Content-Type: application/x-www-form-urlencoded" \
          -d "username=admin' OR '1'='1' --&password=test" \
          -i)
        
        if echo "$response" | grep -q "X-CTF-Flag: ${{ env.CTF_FLAG }}"; then
          echo "✅ SQL injection test passed!"
        else
          echo "⚠️ SQL injection test failed, but deployment succeeded"
        fi
        
        # Update GitHub step summary
        echo "## 🚀 Deployment Successful" >> $GITHUB_STEP_SUMMARY
        echo "**Branch**: $BRANCH_NAME" >> $GITHUB_STEP_SUMMARY
        echo "**URL**: [$URL]($URL)" >> $GITHUB_STEP_SUMMARY
        echo "**App Name**: $APP_NAME" >> $GITHUB_STEP_SUMMARY
        echo "**Flag**: \`${{ env.CTF_FLAG }}\`" >> $GITHUB_STEP_SUMMARY
        echo "**Challenge**: Find the SQL injection vulnerability" >> $GITHUB_STEP_SUMMARY
        echo "**Deploy Time**: $(date)" >> $GITHUB_STEP_SUMMARY
