name: Deploy to Azure

on:
  push:
    branches: [ main, develop, feature/* ]  # Deploy from any branch
  pull_request:
    branches: [ main ]
    types: [ closed ]  # Deploy when PR is merged
  workflow_dispatch:  # Manual deployment
  workflow_run:
    workflows: ["Build & Publish Docker Images"]
    types: [ completed ]
    branches: [ main ]

env:
  AZURE_WEBAPP_NAME: medusa-ctf
  CTF_FLAG: Medusa{CTF_CHALLENGE_PHASE1_PASSED}
  RESOURCE_GROUP: medusa-ctf-rg
  LOCATION: southeastasia

jobs:
  deploy:
    runs-on: ubuntu-latest
    if: |
      (github.event_name == 'push' && github.ref == 'refs/heads/main') ||
      (github.event_name == 'pull_request' && github.event.pull_request.merged == true) ||
      (github.event_name == 'workflow_run' && github.event.workflow_run.conclusion == 'success') ||
      github.event_name == 'workflow_dispatch'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm install
      
    - name: Build React frontend
      run: npm run build
      
    - name: Login to Azure
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
        
    - name: Deploy to Azure App Service
      run: |
        # Use fixed app name for updates instead of creating new ones
        BRANCH_NAME=${GITHUB_REF##*/}
        BRANCH_SAFE=$(echo "$BRANCH_NAME" | sed 's/[^a-zA-Z0-9]/-/g' | tr '[:upper:]' '[:lower:]')
        
        # Use fixed app name for main branch, branch-specific for others
        if [ "$BRANCH_SAFE" = "main" ]; then
          APP_NAME="${{ env.AZURE_WEBAPP_NAME }}-production"
        else
          APP_NAME="${{ env.AZURE_WEBAPP_NAME }}-${BRANCH_SAFE}"
        fi
        
        echo "Using app name: $APP_NAME"
        
        # Create resource group if it doesn't exist
        az group create --name ${{ env.RESOURCE_GROUP }} --location ${{ env.LOCATION }} --output none
        
        # Check if app exists, update or create accordingly
        if az webapp show --name $APP_NAME --resource-group ${{ env.RESOURCE_GROUP }} --output none 2>/dev/null; then
          echo "App $APP_NAME exists, updating deployment..."
          # Update existing app with new Docker image
          az webapp config container set \
            --name $APP_NAME \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --docker-custom-image-name ghcr.io/kavix/medusa-backend:latest \
            --output none
          
          # Restart the app to ensure new image is pulled
          az webapp restart --name $APP_NAME --resource-group ${{ env.RESOURCE_GROUP }} --output none
        else
          echo "App $APP_NAME doesn't exist, creating new app..."
          # Deploy using ARM template only if app doesn't exist
          if az deployment group create \
            --name $APP_NAME \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --template-file .azure/azure-deploy.json \
            --parameters \
              appName=$APP_NAME \
              planName=medusa-ctf-plan \
              location=${{ env.LOCATION }} \
            --output none; then
            echo "✅ App created successfully"
          else
            echo "❌ App creation failed"
            exit 1
          fi
        fi
        
        # Wait for deployment to complete
        echo "Waiting for app to be ready..."
        sleep 30
        
        # Test the deployed app
        URL="https://${APP_NAME}.azurewebsites.net"
        for i in {1..10}; do
          if curl -f -s "$URL" > /dev/null; then
            echo "✅ App is responding at $URL"
            break
          fi
          echo "Waiting for app to start... (attempt $i/10)"
          sleep 15
        done
        
        # Test SQL injection functionality
        echo "Testing SQL injection..."
        response=$(curl -s -X POST "$URL/login" \
          -H "Content-Type: application/x-www-form-urlencoded" \
          -d "username=admin' OR '1'='1' --&password=test" \
          -i)
        
        if echo "$response" | grep -q "X-CTF-Flag: ${{ env.CTF_FLAG }}"; then
          echo "✅ SQL injection test passed!"
        else
          echo "⚠️ SQL injection test failed, but deployment succeeded"
        fi
        
        # Update GitHub step summary
        echo "## 🚀 Deployment Successful" >> $GITHUB_STEP_SUMMARY
        echo "**Branch**: $BRANCH_NAME" >> $GITHUB_STEP_SUMMARY
        echo "**URL**: [$URL]($URL)" >> $GITHUB_STEP_SUMMARY
        echo "**App Name**: $APP_NAME" >> $GITHUB_STEP_SUMMARY
        echo "**Flag**: \`${{ env.CTF_FLAG }}\`" >> $GITHUB_STEP_SUMMARY
        echo "**Challenge**: Find the SQL injection vulnerability" >> $GITHUB_STEP_SUMMARY
        echo "**Deploy Time**: $(date)" >> $GITHUB_STEP_SUMMARY

  automated-cleanup:
    runs-on: ubuntu-latest
    needs: deploy
    if: always() && github.ref == 'refs/heads/main'  # Only cleanup on main branch deployments
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Login to Azure
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
        
    - name: Install jq for JSON processing
      run: sudo apt-get update && sudo apt-get install -y jq
        
    - name: Automated cleanup (keep only latest)
      run: |
        echo "🧹 Running automated cleanup after main branch deployment..."
        
        RESOURCE_GROUP="${{ env.RESOURCE_GROUP }}"
        
        echo "🔍 Finding all web apps in resource group: $RESOURCE_GROUP"
        
        # Get all web apps with their creation times
        apps_json=$(az webapp list --resource-group "$RESOURCE_GROUP" --query "[].{name:name, createdTime:createdTime}" -o json)
        
        if [ -z "$apps_json" ] || [ "$apps_json" = "[]" ]; then
            echo "❌ No web apps found in resource group $RESOURCE_GROUP"
            exit 0
        fi
        
        # Count total apps
        total_apps=$(echo "$apps_json" | jq '. | length')
        echo "📊 Found $total_apps web apps total"
        
        if [ "$total_apps" -le 1 ]; then
            echo "✅ Only one or no apps found, no cleanup needed"
            exit 0
        fi
        
        # Find the latest app by creation time
        latest_app=$(echo "$apps_json" | jq -r 'sort_by(.createdTime) | last | .name')
        echo "🎯 Latest app identified: $latest_app"
        
        # Get all apps except the latest one
        apps_to_delete=$(echo "$apps_json" | jq -r --arg latest "$latest_app" '.[] | select(.name != $latest) | .name')
        
        if [ -z "$apps_to_delete" ]; then
            echo "✅ No apps to delete"
            exit 0
        fi
        
        echo "🗑️  Apps to be deleted:"
        echo "$apps_to_delete"
        echo ""
        
        # Delete old apps (automated in CI/CD)
        deleted_count=0
        failed_count=0
        
        echo "🧹 Starting automated cleanup..."
        echo "$apps_to_delete" | while read -r app_name; do
            if [ ! -z "$app_name" ]; then
                echo "Deleting: $app_name"
                if az webapp delete --name "$app_name" --resource-group "$RESOURCE_GROUP" --only-show-errors; then
                    echo "✅ Successfully deleted: $app_name"
                    deleted_count=$((deleted_count + 1))
                else
                    echo "❌ Failed to delete: $app_name"
                    failed_count=$((failed_count + 1))
                fi
            fi
        done
        
        echo ""
        echo "🎉 Automated cleanup completed!"
        echo "🏆 Kept latest app: $latest_app"
        
        # Show remaining apps
        echo ""
        echo "📋 Remaining apps:"
        az webapp list --resource-group "$RESOURCE_GROUP" --query "[].{Name:name, CreatedTime:createdTime, Url:defaultHostName}" --output table
        
        # Test the remaining app
        echo ""
        echo "🧪 Testing remaining app..."
        app_url="https://${latest_app}.azurewebsites.net"
        
        # Wait a moment for any restart to complete
        sleep 15
        
        if curl -f -s "$app_url" > /dev/null; then
            echo "✅ App is responding: $app_url"
        else
            echo "⚠️  App may not be responding: $app_url"
        fi
        
        # Add cleanup summary to GitHub Actions summary
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## 🧹 Post-Deployment Cleanup" >> $GITHUB_STEP_SUMMARY
        echo "**Total apps before cleanup**: $total_apps" >> $GITHUB_STEP_SUMMARY
        echo "**Latest app kept**: \`$latest_app\`" >> $GITHUB_STEP_SUMMARY
        echo "**Cleanup completed**: $(date)" >> $GITHUB_STEP_SUMMARY
